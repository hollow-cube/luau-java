// Generated by jextract

package net.hollowcube.luau.internal.vm;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct lua_Callbacks {
 *     void *userdata;
 *     void (*interrupt)(lua_State *, int);
 *     void (*panic)(lua_State *, int);
 *     void (*userthread)(lua_State *, lua_State *);
 *     int16_t (*useratom)(const char *, size_t);
 *     void (*debugbreak)(lua_State *, lua_Debug *);
 *     void (*debugstep)(lua_State *, lua_Debug *);
 *     void (*debuginterrupt)(lua_State *, lua_Debug *);
 *     void (*debugprotectederror)(lua_State *);
 *     void (*onallocate)(lua_State *, size_t, size_t);
 * }
 * }
 */
public class lua_Callbacks {

    lua_Callbacks() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        lua_h.C_POINTER.withName("userdata"),
        lua_h.C_POINTER.withName("interrupt"),
        lua_h.C_POINTER.withName("panic"),
        lua_h.C_POINTER.withName("userthread"),
        lua_h.C_POINTER.withName("useratom"),
        lua_h.C_POINTER.withName("debugbreak"),
        lua_h.C_POINTER.withName("debugstep"),
        lua_h.C_POINTER.withName("debuginterrupt"),
        lua_h.C_POINTER.withName("debugprotectederror"),
        lua_h.C_POINTER.withName("onallocate")
    ).withName("lua_Callbacks");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout userdata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userdata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static final AddressLayout userdata$layout() {
        return userdata$LAYOUT;
    }

    private static final long userdata$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static final long userdata$offset() {
        return userdata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static MemorySegment userdata(MemorySegment struct) {
        return struct.get(userdata$LAYOUT, userdata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *userdata
     * }
     */
    public static void userdata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userdata$LAYOUT, userdata$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*interrupt)(lua_State *, int)
     * }
     */
    public static class interrupt {

        interrupt() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            lua_h.C_POINTER,
            lua_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = lua_h.upcallHandle(interrupt.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(interrupt.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout interrupt$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("interrupt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*interrupt)(lua_State *, int)
     * }
     */
    public static final AddressLayout interrupt$layout() {
        return interrupt$LAYOUT;
    }

    private static final long interrupt$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*interrupt)(lua_State *, int)
     * }
     */
    public static final long interrupt$offset() {
        return interrupt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*interrupt)(lua_State *, int)
     * }
     */
    public static MemorySegment interrupt(MemorySegment struct) {
        return struct.get(interrupt$LAYOUT, interrupt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*interrupt)(lua_State *, int)
     * }
     */
    public static void interrupt(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(interrupt$LAYOUT, interrupt$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*panic)(lua_State *, int)
     * }
     */
    public static class panic {

        panic() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            lua_h.C_POINTER,
            lua_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = lua_h.upcallHandle(panic.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(panic.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout panic$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("panic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*panic)(lua_State *, int)
     * }
     */
    public static final AddressLayout panic$layout() {
        return panic$LAYOUT;
    }

    private static final long panic$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*panic)(lua_State *, int)
     * }
     */
    public static final long panic$offset() {
        return panic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*panic)(lua_State *, int)
     * }
     */
    public static MemorySegment panic(MemorySegment struct) {
        return struct.get(panic$LAYOUT, panic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*panic)(lua_State *, int)
     * }
     */
    public static void panic(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(panic$LAYOUT, panic$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*userthread)(lua_State *, lua_State *)
     * }
     */
    public static class userthread {

        userthread() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            lua_h.C_POINTER,
            lua_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = lua_h.upcallHandle(userthread.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(userthread.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout userthread$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userthread"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*userthread)(lua_State *, lua_State *)
     * }
     */
    public static final AddressLayout userthread$layout() {
        return userthread$LAYOUT;
    }

    private static final long userthread$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*userthread)(lua_State *, lua_State *)
     * }
     */
    public static final long userthread$offset() {
        return userthread$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*userthread)(lua_State *, lua_State *)
     * }
     */
    public static MemorySegment userthread(MemorySegment struct) {
        return struct.get(userthread$LAYOUT, userthread$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*userthread)(lua_State *, lua_State *)
     * }
     */
    public static void userthread(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userthread$LAYOUT, userthread$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * int16_t (*useratom)(const char *, size_t)
     * }
     */
    public static class useratom {

        useratom() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            short apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            lua_h.C_SHORT,
            lua_h.C_POINTER,
            lua_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = lua_h.upcallHandle(useratom.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(useratom.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static short invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (short) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout useratom$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("useratom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t (*useratom)(const char *, size_t)
     * }
     */
    public static final AddressLayout useratom$layout() {
        return useratom$LAYOUT;
    }

    private static final long useratom$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t (*useratom)(const char *, size_t)
     * }
     */
    public static final long useratom$offset() {
        return useratom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t (*useratom)(const char *, size_t)
     * }
     */
    public static MemorySegment useratom(MemorySegment struct) {
        return struct.get(useratom$LAYOUT, useratom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t (*useratom)(const char *, size_t)
     * }
     */
    public static void useratom(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(useratom$LAYOUT, useratom$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*debugbreak)(lua_State *, lua_Debug *)
     * }
     */
    public static class debugbreak {

        debugbreak() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            lua_h.C_POINTER,
            lua_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = lua_h.upcallHandle(debugbreak.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(debugbreak.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout debugbreak$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("debugbreak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*debugbreak)(lua_State *, lua_Debug *)
     * }
     */
    public static final AddressLayout debugbreak$layout() {
        return debugbreak$LAYOUT;
    }

    private static final long debugbreak$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*debugbreak)(lua_State *, lua_Debug *)
     * }
     */
    public static final long debugbreak$offset() {
        return debugbreak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*debugbreak)(lua_State *, lua_Debug *)
     * }
     */
    public static MemorySegment debugbreak(MemorySegment struct) {
        return struct.get(debugbreak$LAYOUT, debugbreak$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*debugbreak)(lua_State *, lua_Debug *)
     * }
     */
    public static void debugbreak(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(debugbreak$LAYOUT, debugbreak$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*debugstep)(lua_State *, lua_Debug *)
     * }
     */
    public static class debugstep {

        debugstep() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            lua_h.C_POINTER,
            lua_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = lua_h.upcallHandle(debugstep.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(debugstep.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout debugstep$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("debugstep"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*debugstep)(lua_State *, lua_Debug *)
     * }
     */
    public static final AddressLayout debugstep$layout() {
        return debugstep$LAYOUT;
    }

    private static final long debugstep$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*debugstep)(lua_State *, lua_Debug *)
     * }
     */
    public static final long debugstep$offset() {
        return debugstep$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*debugstep)(lua_State *, lua_Debug *)
     * }
     */
    public static MemorySegment debugstep(MemorySegment struct) {
        return struct.get(debugstep$LAYOUT, debugstep$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*debugstep)(lua_State *, lua_Debug *)
     * }
     */
    public static void debugstep(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(debugstep$LAYOUT, debugstep$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*debuginterrupt)(lua_State *, lua_Debug *)
     * }
     */
    public static class debuginterrupt {

        debuginterrupt() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            lua_h.C_POINTER,
            lua_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = lua_h.upcallHandle(debuginterrupt.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(debuginterrupt.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout debuginterrupt$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("debuginterrupt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*debuginterrupt)(lua_State *, lua_Debug *)
     * }
     */
    public static final AddressLayout debuginterrupt$layout() {
        return debuginterrupt$LAYOUT;
    }

    private static final long debuginterrupt$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*debuginterrupt)(lua_State *, lua_Debug *)
     * }
     */
    public static final long debuginterrupt$offset() {
        return debuginterrupt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*debuginterrupt)(lua_State *, lua_Debug *)
     * }
     */
    public static MemorySegment debuginterrupt(MemorySegment struct) {
        return struct.get(debuginterrupt$LAYOUT, debuginterrupt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*debuginterrupt)(lua_State *, lua_Debug *)
     * }
     */
    public static void debuginterrupt(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(debuginterrupt$LAYOUT, debuginterrupt$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*debugprotectederror)(lua_State *)
     * }
     */
    public static class debugprotectederror {

        debugprotectederror() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            lua_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = lua_h.upcallHandle(debugprotectederror.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(debugprotectederror.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout debugprotectederror$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("debugprotectederror"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*debugprotectederror)(lua_State *)
     * }
     */
    public static final AddressLayout debugprotectederror$layout() {
        return debugprotectederror$LAYOUT;
    }

    private static final long debugprotectederror$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*debugprotectederror)(lua_State *)
     * }
     */
    public static final long debugprotectederror$offset() {
        return debugprotectederror$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*debugprotectederror)(lua_State *)
     * }
     */
    public static MemorySegment debugprotectederror(MemorySegment struct) {
        return struct.get(debugprotectederror$LAYOUT, debugprotectederror$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*debugprotectederror)(lua_State *)
     * }
     */
    public static void debugprotectederror(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(debugprotectederror$LAYOUT, debugprotectederror$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*onallocate)(lua_State *, size_t, size_t)
     * }
     */
    public static class onallocate {

        onallocate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            lua_h.C_POINTER,
            lua_h.C_LONG,
            lua_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = lua_h.upcallHandle(onallocate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(onallocate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout onallocate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("onallocate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*onallocate)(lua_State *, size_t, size_t)
     * }
     */
    public static final AddressLayout onallocate$layout() {
        return onallocate$LAYOUT;
    }

    private static final long onallocate$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*onallocate)(lua_State *, size_t, size_t)
     * }
     */
    public static final long onallocate$offset() {
        return onallocate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*onallocate)(lua_State *, size_t, size_t)
     * }
     */
    public static MemorySegment onallocate(MemorySegment struct) {
        return struct.get(onallocate$LAYOUT, onallocate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*onallocate)(lua_State *, size_t, size_t)
     * }
     */
    public static void onallocate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(onallocate$LAYOUT, onallocate$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

