// Generated by jextract

package net.hollowcube.luau.internal.compiler;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct lua_CompileOptions {
 *     int optimizationLevel;
 *     int debugLevel;
 *     int typeInfoLevel;
 *     int coverageLevel;
 *     const char *vectorLib;
 *     const char *vectorCtor;
 *     const char *vectorType;
 *     const char *const *mutableGlobals;
 *     const char *const *userdataTypes;
 *     const char *const *librariesWithKnownMembers;
 *     lua_LibraryMemberTypeCallback libraryMemberTypeCb;
 *     lua_LibraryMemberConstantCallback libraryMemberConstantCb;
 *     const char *const *disabledBuiltins;
 * }
 * }
 */
public class lua_CompileOptions {

    lua_CompileOptions() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        luacode_h.C_INT.withName("optimizationLevel"),
        luacode_h.C_INT.withName("debugLevel"),
        luacode_h.C_INT.withName("typeInfoLevel"),
        luacode_h.C_INT.withName("coverageLevel"),
        luacode_h.C_POINTER.withName("vectorLib"),
        luacode_h.C_POINTER.withName("vectorCtor"),
        luacode_h.C_POINTER.withName("vectorType"),
        luacode_h.C_POINTER.withName("mutableGlobals"),
        luacode_h.C_POINTER.withName("userdataTypes"),
        luacode_h.C_POINTER.withName("librariesWithKnownMembers"),
        luacode_h.C_POINTER.withName("libraryMemberTypeCb"),
        luacode_h.C_POINTER.withName("libraryMemberConstantCb"),
        luacode_h.C_POINTER.withName("disabledBuiltins")
    ).withName("lua_CompileOptions");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt optimizationLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("optimizationLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int optimizationLevel
     * }
     */
    public static final OfInt optimizationLevel$layout() {
        return optimizationLevel$LAYOUT;
    }

    private static final long optimizationLevel$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int optimizationLevel
     * }
     */
    public static final long optimizationLevel$offset() {
        return optimizationLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int optimizationLevel
     * }
     */
    public static int optimizationLevel(MemorySegment struct) {
        return struct.get(optimizationLevel$LAYOUT, optimizationLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int optimizationLevel
     * }
     */
    public static void optimizationLevel(MemorySegment struct, int fieldValue) {
        struct.set(optimizationLevel$LAYOUT, optimizationLevel$OFFSET, fieldValue);
    }

    private static final OfInt debugLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("debugLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int debugLevel
     * }
     */
    public static final OfInt debugLevel$layout() {
        return debugLevel$LAYOUT;
    }

    private static final long debugLevel$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int debugLevel
     * }
     */
    public static final long debugLevel$offset() {
        return debugLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int debugLevel
     * }
     */
    public static int debugLevel(MemorySegment struct) {
        return struct.get(debugLevel$LAYOUT, debugLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int debugLevel
     * }
     */
    public static void debugLevel(MemorySegment struct, int fieldValue) {
        struct.set(debugLevel$LAYOUT, debugLevel$OFFSET, fieldValue);
    }

    private static final OfInt typeInfoLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("typeInfoLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int typeInfoLevel
     * }
     */
    public static final OfInt typeInfoLevel$layout() {
        return typeInfoLevel$LAYOUT;
    }

    private static final long typeInfoLevel$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int typeInfoLevel
     * }
     */
    public static final long typeInfoLevel$offset() {
        return typeInfoLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int typeInfoLevel
     * }
     */
    public static int typeInfoLevel(MemorySegment struct) {
        return struct.get(typeInfoLevel$LAYOUT, typeInfoLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int typeInfoLevel
     * }
     */
    public static void typeInfoLevel(MemorySegment struct, int fieldValue) {
        struct.set(typeInfoLevel$LAYOUT, typeInfoLevel$OFFSET, fieldValue);
    }

    private static final OfInt coverageLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("coverageLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int coverageLevel
     * }
     */
    public static final OfInt coverageLevel$layout() {
        return coverageLevel$LAYOUT;
    }

    private static final long coverageLevel$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int coverageLevel
     * }
     */
    public static final long coverageLevel$offset() {
        return coverageLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int coverageLevel
     * }
     */
    public static int coverageLevel(MemorySegment struct) {
        return struct.get(coverageLevel$LAYOUT, coverageLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int coverageLevel
     * }
     */
    public static void coverageLevel(MemorySegment struct, int fieldValue) {
        struct.set(coverageLevel$LAYOUT, coverageLevel$OFFSET, fieldValue);
    }

    private static final AddressLayout vectorLib$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vectorLib"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *vectorLib
     * }
     */
    public static final AddressLayout vectorLib$layout() {
        return vectorLib$LAYOUT;
    }

    private static final long vectorLib$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *vectorLib
     * }
     */
    public static final long vectorLib$offset() {
        return vectorLib$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *vectorLib
     * }
     */
    public static MemorySegment vectorLib(MemorySegment struct) {
        return struct.get(vectorLib$LAYOUT, vectorLib$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *vectorLib
     * }
     */
    public static void vectorLib(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vectorLib$LAYOUT, vectorLib$OFFSET, fieldValue);
    }

    private static final AddressLayout vectorCtor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vectorCtor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *vectorCtor
     * }
     */
    public static final AddressLayout vectorCtor$layout() {
        return vectorCtor$LAYOUT;
    }

    private static final long vectorCtor$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *vectorCtor
     * }
     */
    public static final long vectorCtor$offset() {
        return vectorCtor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *vectorCtor
     * }
     */
    public static MemorySegment vectorCtor(MemorySegment struct) {
        return struct.get(vectorCtor$LAYOUT, vectorCtor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *vectorCtor
     * }
     */
    public static void vectorCtor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vectorCtor$LAYOUT, vectorCtor$OFFSET, fieldValue);
    }

    private static final AddressLayout vectorType$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vectorType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *vectorType
     * }
     */
    public static final AddressLayout vectorType$layout() {
        return vectorType$LAYOUT;
    }

    private static final long vectorType$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *vectorType
     * }
     */
    public static final long vectorType$offset() {
        return vectorType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *vectorType
     * }
     */
    public static MemorySegment vectorType(MemorySegment struct) {
        return struct.get(vectorType$LAYOUT, vectorType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *vectorType
     * }
     */
    public static void vectorType(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vectorType$LAYOUT, vectorType$OFFSET, fieldValue);
    }

    private static final AddressLayout mutableGlobals$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mutableGlobals"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *const *mutableGlobals
     * }
     */
    public static final AddressLayout mutableGlobals$layout() {
        return mutableGlobals$LAYOUT;
    }

    private static final long mutableGlobals$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *const *mutableGlobals
     * }
     */
    public static final long mutableGlobals$offset() {
        return mutableGlobals$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *const *mutableGlobals
     * }
     */
    public static MemorySegment mutableGlobals(MemorySegment struct) {
        return struct.get(mutableGlobals$LAYOUT, mutableGlobals$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *const *mutableGlobals
     * }
     */
    public static void mutableGlobals(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mutableGlobals$LAYOUT, mutableGlobals$OFFSET, fieldValue);
    }

    private static final AddressLayout userdataTypes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("userdataTypes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *const *userdataTypes
     * }
     */
    public static final AddressLayout userdataTypes$layout() {
        return userdataTypes$LAYOUT;
    }

    private static final long userdataTypes$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *const *userdataTypes
     * }
     */
    public static final long userdataTypes$offset() {
        return userdataTypes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *const *userdataTypes
     * }
     */
    public static MemorySegment userdataTypes(MemorySegment struct) {
        return struct.get(userdataTypes$LAYOUT, userdataTypes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *const *userdataTypes
     * }
     */
    public static void userdataTypes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(userdataTypes$LAYOUT, userdataTypes$OFFSET, fieldValue);
    }

    private static final AddressLayout librariesWithKnownMembers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("librariesWithKnownMembers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *const *librariesWithKnownMembers
     * }
     */
    public static final AddressLayout librariesWithKnownMembers$layout() {
        return librariesWithKnownMembers$LAYOUT;
    }

    private static final long librariesWithKnownMembers$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *const *librariesWithKnownMembers
     * }
     */
    public static final long librariesWithKnownMembers$offset() {
        return librariesWithKnownMembers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *const *librariesWithKnownMembers
     * }
     */
    public static MemorySegment librariesWithKnownMembers(MemorySegment struct) {
        return struct.get(librariesWithKnownMembers$LAYOUT, librariesWithKnownMembers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *const *librariesWithKnownMembers
     * }
     */
    public static void librariesWithKnownMembers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(librariesWithKnownMembers$LAYOUT, librariesWithKnownMembers$OFFSET, fieldValue);
    }

    private static final AddressLayout libraryMemberTypeCb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("libraryMemberTypeCb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lua_LibraryMemberTypeCallback libraryMemberTypeCb
     * }
     */
    public static final AddressLayout libraryMemberTypeCb$layout() {
        return libraryMemberTypeCb$LAYOUT;
    }

    private static final long libraryMemberTypeCb$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lua_LibraryMemberTypeCallback libraryMemberTypeCb
     * }
     */
    public static final long libraryMemberTypeCb$offset() {
        return libraryMemberTypeCb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lua_LibraryMemberTypeCallback libraryMemberTypeCb
     * }
     */
    public static MemorySegment libraryMemberTypeCb(MemorySegment struct) {
        return struct.get(libraryMemberTypeCb$LAYOUT, libraryMemberTypeCb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lua_LibraryMemberTypeCallback libraryMemberTypeCb
     * }
     */
    public static void libraryMemberTypeCb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(libraryMemberTypeCb$LAYOUT, libraryMemberTypeCb$OFFSET, fieldValue);
    }

    private static final AddressLayout libraryMemberConstantCb$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("libraryMemberConstantCb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * lua_LibraryMemberConstantCallback libraryMemberConstantCb
     * }
     */
    public static final AddressLayout libraryMemberConstantCb$layout() {
        return libraryMemberConstantCb$LAYOUT;
    }

    private static final long libraryMemberConstantCb$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * lua_LibraryMemberConstantCallback libraryMemberConstantCb
     * }
     */
    public static final long libraryMemberConstantCb$offset() {
        return libraryMemberConstantCb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * lua_LibraryMemberConstantCallback libraryMemberConstantCb
     * }
     */
    public static MemorySegment libraryMemberConstantCb(MemorySegment struct) {
        return struct.get(libraryMemberConstantCb$LAYOUT, libraryMemberConstantCb$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * lua_LibraryMemberConstantCallback libraryMemberConstantCb
     * }
     */
    public static void libraryMemberConstantCb(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(libraryMemberConstantCb$LAYOUT, libraryMemberConstantCb$OFFSET, fieldValue);
    }

    private static final AddressLayout disabledBuiltins$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("disabledBuiltins"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *const *disabledBuiltins
     * }
     */
    public static final AddressLayout disabledBuiltins$layout() {
        return disabledBuiltins$LAYOUT;
    }

    private static final long disabledBuiltins$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *const *disabledBuiltins
     * }
     */
    public static final long disabledBuiltins$offset() {
        return disabledBuiltins$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *const *disabledBuiltins
     * }
     */
    public static MemorySegment disabledBuiltins(MemorySegment struct) {
        return struct.get(disabledBuiltins$LAYOUT, disabledBuiltins$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *const *disabledBuiltins
     * }
     */
    public static void disabledBuiltins(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(disabledBuiltins$LAYOUT, disabledBuiltins$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

